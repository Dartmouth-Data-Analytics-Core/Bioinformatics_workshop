png(paste0("~/BISR/bioinfo-workshop/lm_example-3.png"),width=6.5*ppi, height=6*ppi, res=ppi)
plot(dat3$subject_group, dat3$exp_geneX,
ylab = "Expression (Gene X)",
xlab = "Subject group",
main = "Gene X exp. vs Disease status",
col = "indianred", pch = 16, las = 1)
abline(lm_2, lty=2)
dev.off()
par(mfrow=c(3,1))
hist(rnbinom(n = 10000, mu = 100, size = 1/0.001),
xlim = c(0, 300), xlab = "", breaks = 500,
main = " Dispersion 0.001")
### dispersion = 10
hist(rnbinom(n = 10000, mu = 100, size = 1/0.01),
xlim = c(0, 300), xlab = "", breaks = 500,
main = " Dispersion 0.01")
### dispersion = 10
hist(rnbinom(n = 10000, mu = 100, size = 1/0.1),
xlim = c(0, 300), xlab = "", breaks = 500,
main = " Dispersion 0.1")
hist(rnbinom(n = 10000, mu = 100, size = 1/0.001),
xlim = c(0, 300), xlab = "", breaks = 500,
main = " Dispersion 0.001", col = "lightgray")
par(mfrow=c(3,1))
hist(rnbinom(n = 10000, mu = 100, size = 1/0.001),
xlim = c(0, 300), xlab = "", breaks = 500,
main = " Dispersion 0.001", col = "lightgray")
### dispersion = 10
hist(rnbinom(n = 10000, mu = 100, size = 1/0.01),
xlim = c(0, 300), xlab = "", breaks = 500,
main = " Dispersion 0.01", col = "cornflowerblue")
### dispersion = 10
hist(rnbinom(n = 10000, mu = 100, size = 1/0.1),
xlim = c(0, 300), xlab = "", breaks = 500,
main = " Dispersion 0.1", col = "indianred")
### dispersion = 10
hist(rnbinom(n = 10000, mu = 100, size = 1/0.01),
xlim = c(0, 300), xlab = "", breaks = 500,
main = " Dispersion 0.01", col = "cornflowerblue")
### dispersion = 10
hist(rnbinom(n = 10000, mu = 100, size = 1/0.1),
xlim = c(0, 300), xlab = "", breaks = 500,
main = " Dispersion 0.1", col = "indianred")
ppi=300
### dispersion = 10
hist(rnbinom(n = 10000, mu = 100, size = 1/0.1),
xlim = c(0, 300), xlab = "", breaks = 500,
main = " Dispersion 0.1", col = "red")
### dispersion = 10
hist(rnbinom(n = 10000, mu = 100, size = 1/0.1),
xlim = c(0, 300), xlab = "", breaks = 500, col = "indianred",
main = " Dispersion 0.1")
ppi=300
png(paste0("~/BISR/bioinfo-workshop/lm_example-0.png"),width=6.5*ppi, height=6*ppi, res=ppi)
dev.off()
### dispersion = 10
hist(rnbinom(n = 10000, mu = 100, size = 1/0.1),
xlim = c(0, 300), xlab = "", breaks = 500, col = "indianred",
main = " Dispersion 0.1")
dev.off()
dev.off()
### dispersion = 10
hist(rnbinom(n = 10000, mu = 100, size = 1/0.1),
xlim = c(0, 300), xlab = "", breaks = 500, col = "indianred",
main = " Dispersion 0.1")
df <- data.frame("Dispersion 0.001" = rnbinom(n = 10000, mu = 100, size = 1/0.001),
"Dispersion 0.01" = rnbinom(n = 10000, mu = 100, size = 1/0.01),
"Dispersion 0.1" = rnbinom(n = 10000, mu = 100, size = 1/0.01))
rnbinom(n = 10000, mu = 100, size = 1/0.001)
df <- data.frame("x" = c(rnbinom(n = 10000, mu = 100, size = 1/0.001),
df <- data.frame("x" = c(rnbinom(n = 10000, mu = 100, size = 1/0.001),
c(rnbinom(n = 10000, mu = 100, size = 1/0.001),
rnbinom(n = 10000, mu = 100, size = 1/0.01),
rnbinom(n = 10000, mu = 100, size = 1/0.1))
df <- data.frame("x" = c(rnbinom(n = 10000, mu = 100, size = 1/0.001),
df <- data.frame("x" = c(rnbinom(n = 10000, mu = 100, size = 1/0.001), rnbinom(n = 10000, mu = 100, size = 1/0.01),
df <- data.frame("x" = c(
c(rnbinom(n = 10000, mu = 100, size = 1/0.001),
rnbinom(n = 10000, mu = 100, size = 1/0.01),
rnbinom(n = 10000, mu = 100, size = 1/0.1))
x <- c(rnbinom(n = 10000, mu = 100, size = 1/0.001),
rnbinom(n = 10000, mu = 100, size = 1/0.01),
rnbinom(n = 10000, mu = 100, size = 1/0.1))
x <- c(rnbinom(n = 10000, mu = 100, size = 1/0.001), rnbinom(n = 10000, mu = 100, size = 1/0.01), rnbinom(n = 10000, mu = 100, size = 1/0.1))
df <- data.frame("x" = x,
df <- data.frame("x" = x, "Dispersion" = c(rep(10000, "0.001"),rep(10000, "0.01"),rep(10000, "0.1"))
df <- data.frame("x" = x, "Dispersion" = c(rep(10000, "0.001"),rep(10000, "0.01"),rep(10000, "0.1")))
c(rep(10000, "0.001"),rep(10000, "0.01"),rep(10000, "0.1"))
df <- data.frame("x" = x, "Dispersion" = c(rep("0.001", 10000),rep("0.01", 10000),rep("0.1", 10000)))
# Interleaved histograms
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(fill="white", position="dodge")+
theme(legend.position="top")
# Interleaved histograms
library(ggplot2)
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(fill="white", position="dodge")+
theme(legend.position="top")
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5)
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5, binwidth=1)
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5, binwidth=0.8)
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5, binwidth=0.8)
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=0.8)
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=0.8)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=0.1)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=50)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=30)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=20)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=10)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=2)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
x <- c(rnbinom(n = 10000, mu = 100, size = 1/0.001), rnbinom(n = 10000, mu = 200, size = 1/0.01), rnbinom(n = 10000, mu = 300, size = 1/0.1))
df <- data.frame("x" = x, "Dispersion" = c(rep("0.001", 10000),rep("0.01", 10000),rep("0.1", 10000)))
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=2)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=5)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=5)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"),
ylab="Genes", xlab="Expression counts")
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=5)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"),
ylab="Genes", xlab="Expression")
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=5)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
ylab="Genes" + xlab="Expression"
ggplot(df, aes(x=x, color=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=5)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
ylab("Genes") + xlab("Expression")
ggplot(df, aes(x=x, color=Dispersion, fill=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=5)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
ylab("Genes") + xlab("Expression")
p <- ggplot(df, aes(x=x, color=Dispersion, fill=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=5)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
ylab("Genes") + xlab("Expression") + ggtitle("N")
p
p <- ggplot(df, aes(x=x, color=Dispersion, fill=Dispersion)) +
geom_histogram(position="identity", alpha=0.5,
binwidth=5)+
scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))+
scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9")) +
ylab("Genes") + xlab("Expression") + ggtitle("Negative Binomial distribution for RNA-seq data")
p
ppi=300
png(paste0("~/BISR/bioinfo-workshop/neg-binom.png"),width=6.5*ppi, height=6*ppi, res=ppi)
print(p)
dev.off()
ppi=300
png(paste0("~/BISR/bioinfo-workshop/neg-binom.png"),width=6.5*ppi, height=4.6*ppi, res=ppi)
print(p)
dev.off()
450/300
600/1.5
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
txdb <- TxDb.Mmusculus.UCSC.mm10.knownGene
extraCols_narrowPeak <- c(signalValue = "numeric", pValue = "numeric",
qValue = "numeric", peak = "integer")
fr_h3k27ac <- rtracklayer::import("forebrain_E15.5_H3K27ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
# heart H3K9ac ChIP-seq peaks
ht_h3k27ac <- rtracklayer::import("heart_E15.5_H3K27ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
fr_h3k9ac <- rtracklayer::import("forebrain_E15.5_H3K9ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
# heart H3K9ac ChIP-seq peaks
ht_h3k9ac <- rtracklayer::import("heart_E15.5_H3K9ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
# combine with H3K27ac peak sets to make GrangesList objects
fr <- GRangesList("h3K27ac" = fr_h3k27ac, "h3K9ac" = fr_h3k9ac)
ht <- GRangesList("h3K27ac" = ht_h3k27ac, "h3K9ac" = ht_h3k9ac)
fr_h3k27ac <- rtracklayer::import("BISR/bioinfo-workshop/bed/forebrain_E15.5_H3K27ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
# heart H3K9ac ChIP-seq peaks
ht_h3k27ac <- rtracklayer::import("BISR/bioinfo-workshop/bed/heart_E15.5_H3K27ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
fr_h3k9ac <- rtracklayer::import("BISR/bioinfo-workshop/bed/forebrain_E15.5_H3K9ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
# heart H3K9ac ChIP-seq peaks
ht_h3k9ac <- rtracklayer::import("BISR/bioinfo-workshop/bed/heart_E15.5_H3K9ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
# combine with H3K27ac peak sets to make GrangesList objects
fr <- GRangesList("h3K27ac" = fr_h3k27ac, "h3K9ac" = fr_h3k9ac)
ht <- GRangesList("h3K27ac" = ht_h3k27ac, "h3K9ac" = ht_h3k9ac)
fr_h3K27ac_anno <- annotatePeak(fr$h3K27ac, tssRegion=c(-2000, 1000), TxDb = txdb)
library(ChIPseeker)
fr_h3K27ac_anno <- annotatePeak(fr$h3K27ac, tssRegion=c(-2000, 1000), TxDb = txdb)
annolist <- lapply(list(fr$h3K27ac, ht$h3K27ac, fr$h3K9ac, ht$h3K9ac),
annotatePeak,
TxDb=txdb,
tssRegion=c(-2000, 1000), verbose=FALSE)
names(annolist) <- c('Forebrain_H3K27ac', 'Heart_H3K27ac',
'Forebrain_H3K9ac', 'Heart_H3K9ac')
plotAnnoBar(annolist)
library(Seurat)
ExportToCellbrowser
ExportToCellbrowser
?ExportToCellbrowser
pbmc_small
ExportToCellbrowser(object = pbmc_small, dataset.name = "PBMC", dir = "~/ucsc-test/")
?FindAllMarkers
?FindConservedMarkers
?FeaturePlot
ExportToCellbrowser
log10(0)
NormalizeData
FindAllMarkers()
?NormalizeData.Seurat
x <- c(1+0i, 2+4i)
x
?c
x <- c(1, 2, 3, 4, c(1, 2, 3, 4))
x
y <- c(2,2,2,2)
x * y
mat <- matrix(c(1:20), nrow=4, ncol=5)
mat
df <- data.frame(subject_id = c("s1", "s2", "s3", "s4"),
age = c(45, 83, 38, 23),
gender = c("female", "female", "male", "female"),
status = c("case", "case", "control", "control"))
df
str(df)
df <- data.frame(subject_id = c("s1", "s2", "s3", "s4"),
age = c(45, 83, 38, 23),
gender = c("female", "female", "male", "female"),
status = c("case", "case", "control", "control"),
StringsAsFactors=FALSE)
str(df)
df <- data.frame(subject_id = c("s1", "s2", "s3", "s4"),
age = c(45, 83, 38, 23),
gender = c("female", "female", "male", "female"),
status = c("case", "case", "control", "control"),
stringsAsFactors=FALSE)
str(df)
df
df$gender == "female"
x <- c(1, 2, 3, 4)
# which elements are less than 2 and equal to 4
x < 2 | x ==4
x ! 4
!x == 4
myfun <- function(x){
y <- x + 1
return(y)
}
myfun(x = 10)
myfun(x = c(1:10))
sapply(1:10, myfun)
myfun2 <- function(num1, num2){
num3 <- num1 + num1
return(num3)
}
# call the function
myfun(num1 = 10, num2 = 11)
myfun2(num1 = 10, num2 = 11)
myfun2 <- function(num1, num2){
num3 <- num1 + num2
return(num3)
}
# call the function
myfun2(num1 = 10, num2 = 11)
a <- 1:10
seq_along(a)
x <- c(1,2,3,4,5,6,7,8,9)
for(i in 1:length(x)){
y <- i * 10
return(y)
}
return(y)
y
for(i in 1:length(x)){
i * 10
}
for(i in 1:length(x)){
print(i * 10)
}
for(i in 1:length(x)){
print(x[i] * 10)
}
x <- rnorm(1, 2, 10)
x
plot(x, y)
x <- rnorm(1000, mean = 10, sd = 2)
y <- rnorm(1000, mean = 20, sd = 1)
plot x against y
plot(x, y)
plot(x, y,
main = "X vs. Y",
xlab = "X values",
ylab = "Y values",
col = "red")''
plot(x, y,
main = "X vs. Y",
xlab = "X values",
ylab = "Y values",
col = "red")
boxplot(x,y)
hist(x, col = "red")
hist(x, col = "indianred")
hist(x, col = "indianred", breaks=2)
hist(x, col = "indianred", breaks=10)
hist(x, col = "indianred", breaks=50)
hist(x, col = "indianred", breaks=100)
boxplot(x, y, col = c("indianred", "cornflowerblue"))
boxplot(x, y,
main = "X vs Y",
xlab = c("x", "y"),
col = c("indianred", "cornflowerblue"))
?read.table()
counts <- read.table("~/all_counts.txt", header = TRUE, stringsAsFactors=FALSE)
dim(counts)
str(counts)
head(counts)
class(counts); dim(counts); str(counts)
# using read.delim (header=TRUE by default, so we need not set it)
counts <- read.table("~/all_counts.txt", stringsAsFactors=FALSE)
### Note: we use stringsAsFactors
# check class, dimensions and structure
class(counts); dim(counts); str(counts)
counts <- read.table("~/all_counts.txt", sep= "\t", header = TRUE, stringsAsFactors=FALSE)
### Note: we use stringsAsFactors
# check class, dimensions and structure
class(counts); dim(counts); str(counts)
?write.table
counts_sub <- counts[1:2000, 1:5]
# write to tab delimited file using write.table
write.table(counts_sub, file = "~/all_counts_sub.txt", sep = "\t")
?save
x <- c(1.63, 2.25, 3.83, 4.99),
y <- c(TRUE, FALSE, TRUE, TRUE),
z <- c("a", "b", "c", "d")
save(x, y, z, file = "~/my_r_objects.rdata")
x <- c(1.63, 2.25, 3.83, 4.99)
y <- c(TRUE, FALSE, TRUE, TRUE)
z <- c("a", "b", "c", "d")
save(x, y, z, file = "~/my_r_objects.rdata")
x <- c(1.63, 2.25, 3.83, 4.99)
y <- c(TRUE, FALSE, TRUE, TRUE)
z <- c("a", "b", "c", "d")
save(x, y, z, file = "~/my_r_objects.rdata")
?saveRDS
?print
print
dat <- read.csv("lm-example-data.csv", stringsAsFactors=FALSE)
setwd(../omw/)
setwd("../omw/Documents/GitHub/Bioinformatics_workshop/Day-3/data/")
extraCols_narrowPeak <- c(signalValue = "numeric", pValue = "numeric",
qValue = "numeric", peak = "integer")
fr_h3k27ac <- rtracklayer::import("forebrain_E15.5_H3K27ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
# heart H3K9ac ChIP-seq peaks
ht_h3k27ac <- rtracklayer::import("heart_E15.5_H3K27ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
fr_h3k9ac <- rtracklayer::import("forebrain_E15.5_H3K9ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
setwd("../omw/Documents/GitHub/Bioinformatics_workshop/Day-2/data/")
setwd("../../Day-2/data/")
extraCols_narrowPeak <- c(signalValue = "numeric", pValue = "numeric",
qValue = "numeric", peak = "integer")
fr_h3k27ac <- rtracklayer::import("forebrain_E15.5_H3K27ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
# heart H3K9ac ChIP-seq peaks
ht_h3k27ac <- rtracklayer::import("heart_E15.5_H3K27ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
fr_h3k9ac <- rtracklayer::import("forebrain_E15.5_H3K9ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
setwd("gorkin-et-al/")
# include sectin of basic data reprresentation as raw counts in hgs, and common
# ways we can explore relations between samples in an exploratory data analysis like pca (use pca figure from rnaseq workshop)
# linear models and generalized linear models
# basic idea behind statistical tests in genomics (different tests for different data and use cases)
# then describe the situation of mutliple hypothesis stesting and why we must correct for it
# then some example visuaizations after hypothesis testing e.g. volcano plots, clustering, ma plot
# give an example in terms of gene set testing
extraCols_narrowPeak <- c(signalValue = "numeric", pValue = "numeric",
qValue = "numeric", peak = "integer")
fr_h3k27ac <- rtracklayer::import("forebrain_E15.5_H3K27ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
# heart H3K9ac ChIP-seq peaks
ht_h3k27ac <- rtracklayer::import("heart_E15.5_H3K27ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
fr_h3k9ac <- rtracklayer::import("forebrain_E15.5_H3K9ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
# heart H3K9ac ChIP-seq peaks
ht_h3k9ac <- rtracklayer::import("heart_E15.5_H3K9ac.bed",
format = "BED",
extraCols = extraCols_narrowPeak,
genome = "mm10")
# combine with H3K27ac peak sets to make GrangesList objects
fr <- GRangesList("h3K27ac" = fr_h3k27ac, "h3K9ac" = fr_h3k9ac)
ht <- GRangesList("h3K27ac" = ht_h3k27ac, "h3K9ac" = ht_h3k9ac)
# subset for overlapping regions within each tissue, across both histone marks
fr_overlaps <- findOverlaps(query = fr$h3K27ac, subject = fr$h3K9ac)
fr_overlaps
# subset the forebrain GRanges object for H3K27ac peaks that overlap with peaks in heart
fr_h3k27ac_ov_h3K9ac <- fr$h3K27ac[queryHits(fr_overlaps)]
# use these objects to calculate the % of overlapping peaks between
length(fr_h3k27ac_ov_h3K9ac)/length(fr$h3K27ac)*100
# subset for overlapping regions within each tissue, across both histone marks
ht_overlaps <- findOverlaps(query = ht$h3K27ac, subject = ht$h3K9ac)
ht_overlaps
# subset the forebrain GRanges object for H3K27ac peaks that overlap with peaks in heart
ht_h3k27ac_ov_h3K9ac <- ht$h3K27ac[queryHits(ht_overlaps)]
# use these objects to calculate the % of overlapping peaks between
length(ht_h3k27ac_ov_h3K9ac)/length(ht$h3K27ac)*100
fr_h3k27ac_track <- AnnotationTrack(fr$h3K27ac, chromosome = "chr11", start = 98.2e6, end = 98.5e6,
name = "Fr. - H3K27ac", stacking = "dense", fill = "indianred")
ht_h3k27ac_track <- AnnotationTrack(ht$h3K27ac, chromosome = "chr11", start = 98.2e6, end = 98.5e6,
name = "Heart - H3K9ac", stacking = "dense", fill = "cornflowerblue")
(
library(Gviz)
fr_h3k27ac_track <- AnnotationTrack(fr$h3K27ac, chromosome = "chr11", start = 98.2e6, end = 98.5e6,
name = "Fr. - H3K27ac", stacking = "dense", fill = "indianred")
ht_h3k27ac_track <- AnnotationTrack(ht$h3K27ac, chromosome = "chr11", start = 98.2e6, end = 98.5e6,
name = "Heart - H3K9ac", stacking = "dense", fill = "cornflowerblue")
#
gtrack <- GenomeAxisTrack()
plotTracks(list(gtrack, fr_h3k27ac_track, ht_h3k27ac_track),
from = 98.2e6, to = 98.5e6)
175
175*2
